// Chargement du fichier JSON contenant les donn√©es des destinations
fetch("/data.json")
  .then((response) => response.json()) // Convertir la r√©ponse en format JSON
  .then((data) => {
    // S√©lectionner les √©l√©ments HTML qui seront mis √† jour
    const planetButtons = document.querySelectorAll(".planet-button"); // Les boutons pour chaque plan√®te
    const planetName = document.getElementById("planet-name"); // Le nom de la plan√®te
    const planetDescription = document.getElementById("planet-description"); // La description de la plan√®te
    const planetImage = document.getElementById("planet-image"); // L'image de la plan√®te
    const planetDistance = document.getElementById("planet-distance"); // La distance vers la plan√®te
    const planetTravel = document.getElementById("planet-travel"); // Le temps de voyage pour atteindre la plan√®te
    const planetContainer = document.getElementById("planet-container");
    // Fonction pour mettre √† jour les informations d'une plan√®te donn√©e
    function updatePlanet(planet) {
      // Chercher la destination correspondant au nom de la plan√®te
      const destination = data.destinations.find(
        (destination) => destination.name === planet,
      );

      if (destination) {
        // Mettre √† jour les √©l√©ments de la page avec les donn√©es de la plan√®te
        planetName.textContent = destination.name;
        planetDescription.textContent = destination.description;
        planetImage.src = destination.images.webp; // L'image de la plan√®te au format PNG
        planetDistance.textContent = destination.distance; // La distance vers la plan√®te
        planetTravel.textContent = destination.travel; // Le temps de voyage
      }

      // üî• Mettre √† jour le focus visuel
      planetButtons.forEach((button) => {
        button.classList.remove("selected"); // Retirer la classe de toutes les plan√®tes
        button.setAttribute("aria-selected", "false"); // Accessibilit√©

        if (button.getAttribute("data-planet") === planet) {
          button.classList.add("selected"); // Ajouter la classe sur la plan√®te s√©lectionn√©e
          button.setAttribute("aria-selected", "true");
        }
      });
    }

    // Ajouter un √©v√©nement de clic √† chaque bouton de plan√®te
    planetButtons.forEach((button) => {
      button.addEventListener("click", () => {
        // R√©cup√©rer le nom de la plan√®te √† partir de l'attribut 'data-planet' du bouton cliqu√©
        const planet = button.getAttribute("data-planet");

        planetContainer.classList.add("fade-out");

        setTimeout(() => {
          // Mettre √† jour les informations de la plan√®te s√©lectionn√©e
          updatePlanet(planet);

          planetContainer.classList.remove("fade-out");
          planetContainer.classList.add("fade-in");

          setTimeout(() => {
            planetContainer.classList.remove("fade-in");
          }, 500);
        }, 500);
      });
    });

    // Initialiser la page avec la premi√®re plan√®te (Moon)
    updatePlanet("Moon");
  });
